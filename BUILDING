//////////////////////////////////////////////////////////////////////
// ymtools のビルドについて
//						松永　裕介
//                                             ????.??.?? Ver.1
//                                             2013.11.20 Ver.2
//                                             2015.03.07 Ver.3
//////////////////////////////////////////////////////////////////////

ymtools は cmake を用いて Makefile の生成を行います．
そのためビルドの流れが以前に比べて単純になりました．
大まかな流れは以下のとおりです．

 0. ビルドに必要なツールのインストール
 1. cmake の実行
 2. make の実行
 3. mk_builddir.sh スクリプト

このうち 0. は PC 上のソフトウェア開発環境を一回インストールすれば以降
は必要ありません．たまにソフトウェアのバージョンアップが必要になるかも
しれません．
1. も通常は最初に一回だけ行えばよいですが，新たにソースファイルを追加
した時などにも実行する必要があります．
2. はソースファイルに変更があった時には毎回実行します．
3. の mk_builddir.sh スクリプトは上記の手順を行うシェルスクリプトです．


//////////////////////////////////////////////////////////////////////
// 0. ビルドに必要なツールのインストール
//////////////////////////////////////////////////////////////////////

ymtools のビルドに必要なツールは以下のとおりです．

- cmake
- gcc/g++ もしくは clang/clang++
- lex (flex)
- yacc (bison)
- tcl
- tclreadline
- popt
- gmp
- python
- Qt
- CppUTest

以下に個々のツールについて補足します．

○ cmake
 現在，FreeBSD-10.1Release の cmake-3.1.3 を用いています．たぶん，
 cmake 3.X なら大丈夫だと思います．

○ gcc/g++ もしくは clang/clang++
 現在，FreeBSD-10.1Release の clang-3.4.1 を用いています．
 たぶん gcc-4.7 以降でも動くと思います．

○ lex (flex)
 現在，flex-2.5.4 でテストしています．
 というか今は lex を使うコードはありません．

○ yacc (bison)
 現在，bison-2.4.3, bison-2.5 でテストしています．
bison を yacc 互換で動かすためには bison -y とします．
bison-1.X.X では %define api.pure ディレクティブを理解してくれないの
で動きません．

○ tcl
 現在，tcl-8.5 でテストしています．8.4 などでも動くと思います．

○ tclreadline
 現在，tclreadline-2.1.0 でテストしています．

○ popt
 現在，popt-1.16 でテストしています．

○ gmp
 現在，gmp-5.0.1 でテストしています．もしも gmp をソースからビルドして
 インストールする場合には，configure 時に --enable-cxx をつけるよう
 にしてください(*1)．

○ python
 現在，python-2.7.3 でテストしています．

○ Qt
 現在，Qt-4.7.4 でテストしています．

○ CppUTest
 現在，cpputest-3.5 でテストしています．


0.1 上記ツールがインストールされていない場合の対処

一番簡単なのは，計算機の管理者にいって，上記のツールの最新バージョンを
インストールしてもらうことですが，それが難しい場合には自分でソースをもっ
てきて，configure; make; make install する必要があります．
その場合，ymtools 用のディレクトリを用意してそこにこれら一連のツールを
インストールすることをおすすめします．例えば，ymtools 用に，

/project/ymtools

というディレクトリを用意したとします(別にこれは自分のホームディレクト
リの下でも構いません)．
例えば，autoconf をインストールする際に，autoconf のソースディレクトリ
に移って，

./configure --prefix=/project/ymtools
make
make install

とすれば，/project/ymtools/bin/autoconf などがインストールされます．
同様に，gmp も

./configure --prefix=/project/ymtools --enable-cxx(*1)
make
make install

とすれば，/project/ymtools/lib/libgmpxx.so などのファイルがインストー
ルされます．

これら，自分でインストールしたツールを ymtools のビルドに使う場合の指
定の仕方ですが，大きく分けて3つの場合があります．

- cmake の実行時に必要なもの
 cmake がツールを見つけられるように適切なオプションを指定します．
 詳しくは cmake のマニュアルを参照してください．
 cmake のオプション指定は最初に一回だけ行えばあとはその指定を引き継ぎ
 ます．


//////////////////////////////////////////////////////////////////////
// 1. cmake の実行
//////////////////////////////////////////////////////////////////////

cmake の仕事は Cコンパイラなどのビルドツールの確認や必要なライブラリの
検索などを行って Makefile を生成することです．
ですのでソースファイルを追加したり，リンクするライブラリを追加したりす
るような Makefile に変更される場合には cmake を実行する必要があります．
逆に，ソースファイルの内容だけが変更された場合には Makefile の変更はあ
りませんので cmake を実行する必要はありません．

cmake はコンパイラやライブラリの場所や名前を巧妙な方法で探します．ライ
ブラリなどをデフォルトの位置にインストールしている場合にはほとんど何の
指定もせずに見つけてくれますが，自分のホームディレクトリの下にインストー
ルした場合などには cmake に位置を教える必要があります．
具体的な方法は cmake のマニュアルで調べてください．
通常，これらの指定は最初の一回だけ行えば，2回め以降は省略可能です．

[**重要**]
cmake はソースディレクトリ上で実行することも可能ですが，ソースディレク
トリはバージョン管理されたファイルが存在しますので，ビルド用の一時ファ
イルやコンパイル結果のファイルなどでソースディレクトリが汚れてしまうこ
とはあまり好ましいことではありません．たとえば git add ./* などとして
しまうと .gitignore で明示的に除外しておかない限りそのディレクトリにあ
るファイルがすべてバージョン管理の対象となってしまいます．
そこで，ビルド用に別のディレクトリを用意し，そこにコンパイル結果のファ
イルを置くことが一般的です．これは automake/autoconf でも同様です．
やりかたは極めて簡単です．今，ソースディレクトリを $(SRC_DIR) ビルドディ
レクトリを $(BUILD_DIR) とします．すると cmake の実行は以下のような手
順で行います．

$ mkdir -p $(BUILD_DIR)
$ cd $(BUILD_DIR)
$ cmake $(SRC_DIR)

これで $(BUILD_DIR) 以下に Makefile といくつかの作業用ディレクトリが生
成されます．

cmake に関してはまだ使いこなせていないのでいろいろ変わる可能性がありま
す．


//////////////////////////////////////////////////////////////////////
// 2.　make の実行
//////////////////////////////////////////////////////////////////////

cmake で問題が起こっていない限りあとは make とタイプするだけですべての
ビルドが完了します．


//////////////////////////////////////////////////////////////////////
// 3.　mk_builddir.sh スクリプト
//////////////////////////////////////////////////////////////////////

ビルドディレクトリの用意と毎回の cmake の実行を行うスクリプトの生成
を行うためのスクリプトを作りました．
ソースディレクトリで

$ mk_builddir <ビルドディレクトリ>

を実行すると <ビルドディレクトリ>　直下に mk というシェルスクリプトと
release, debug というサブディレクトリが生成されます．
普通はそのままビルドディレクトリで

$ ./mk make

を実行すれば release バージョンと debug バージョンの両方をコンパイルします．

$ ./mk make-release

もしくは

$ ./mk make-debug

で指定された一方のみをコンパイルします．

mk_buildir.sh も mk も単純なシェルスクリプトなので適当にカスタマイズしてください．


//////////////////////////////////////////////////////////////////////
// A-1 CppUTest
//////////////////////////////////////////////////////////////////////

部分的に CppUTest を用いたテストコードを導入しています．
CppUTest がインストールされていれば，

libym_logic/test/CppUTest/run_all_test

のようなテストプログラムが生成されます．
これを実行してエラーがでなければ，(ここでチェックした範囲においては)
テストが通ったことになります．
将来的には根元の tests/CppUTest の下に run_all_test をまとめて作って
完全な regression test を行なえるようにする予定です．

--END
